name: integration testing

on:
  push:
    paths:
      - ".github/workflows/integration-tests.yml"
  workflow_dispatch: # manual

jobs:
  generate:
    # hook this into CD pipeline, after build/unit tests
    runs-on: ubuntu-latest
    outputs:
      RANDOM_PASSWORD: ${{ env.RANDOM_PASSWORD }} # two birds, one stone (use ENV locally to pass and next job uses this jobs output) # evaluated after steps, thus RANDOM_PASSWORD is set
      #
      # ALTERNATIVE:
      RANDOM_PASSWORD_VIA_OUTPUT: ${{ steps.generate-to-output.outputs.RANDOM_PASSWORD_VIA_OUTPUT }} # alternative is to use step output instead of env var (use GITHUB_OUTPUT env file below instead of GITHUB_ENV), pro of env var is it is auto avail to all subsequent steps in job, whereas step output has to be explicitly passed to subsequent steps (i.e. below when I dump RANDOM_PASSWORD_VIA_OUTPUT)
    steps:
      - name: dump env vars BEFORE
        run: env | sort
      - name: generate a random password for mysql
        id: generate-step # dont confuse with job-id, this is a step-id
        run: echo "RANDOM_PASSWORD=$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 12)" >> "$GITHUB_ENV"
      - run: echo "$RANDOM_PASSWORD" # prefer this vs expression (next) b/c this shows its auto avail in subsequent steps
      - run: echo ${{ env.RANDOM_PASSWORD }} # works too but requires eval expression and inject value, easier to read env var instead (w/o context, see prior step)
      - name: dump env vars AFTER
        run: env | sort
      - run: echo "the password is ${{ env.RANDOM_PASSWORD }} :rocket:" >> $GITHUB_STEP_SUMMARY
      #
      # ALTERNATIVE:
      - name: alternative is to store as output (not env var)
        id: generate-to-output
        run: echo "RANDOM_PASSWORD_VIA_OUTPUT=$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 12)" >> "$GITHUB_OUTPUT"
      - name: dump RANDOM_PASSWORD_VIA_OUTPUT
        # con of step output => have to explicitly pass outputs where as env vars are auto avail to all subsequent steps in job
        run: echo ${{ steps.generate-to-output.outputs.RANDOM_PASSWORD_VIA_OUTPUT }} # password is visible
      - name: test mysql version on runner (if in path)
        run: mysql --version

  # testing job for Step 1 demo:
  # testing1:
  #   needs: generate # *** must be after gen password!
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo ${{ needs.generate.outputs.RANDOM_PASSWORD }}

  testing2:
    needs: generate # *** must be after gen password!
    runs-on: ubuntu-latest
    container:
      # image: mysql:8
      # image: mysql:5.7
      image: mariadb:11
      # FYI mysql also exists on standard runners, but use container for specific version  and/or alternatives like mariadb
      # this will simulate a client that connects to the mysql database (i.e. an intergation test runner)
    services:
      # mariadbserver:
      #   image: mariadb:11
      #   env:
      #     MARIADB_ROOT_PASSWORD: ${{ needs.generate.outputs.RANDOM_PASSWORD }}
      #     MARIADB_DATABASE: carfoo
      #   options: --health-cmd="mariadb-admin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      #   # FYI mariadb-admin ping => returns 0 if running (even if access denied) so you don't need to pass user/pass to use this for health check
      mysqlserver:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ needs.generate.outputs.RANDOM_PASSWORD }}
          MYSQL_DATABASE: foothebar
        # ports => don't need publish ports, b/c all containers are on same UDF network (think docker compose project)
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        # FYI mysqladmin ping => returns 0 if running (even if access denied) so you don't need to pass user/pass to use this for health check => https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html
    steps:
      # run steps are executed in the job container (hence the name, a job container b/c these are job steps)
      - run: mysql --version
      # - run: mariadb --version
      - run: echo "RANDOM_PASSWORD=${{ needs.generate.outputs.RANDOM_PASSWORD }}"
      - run: mysql -h mysqlserver -u root -p${{ needs.generate.outputs.RANDOM_PASSWORD }} -e "SHOW DATABASES;"
      # - run: mariadb -h mariadbserver -u root -p${{ needs.generate.outputs.RANDOM_PASSWORD }} -e "SHOW DATABASES;"
      - run: echo "job.services= ${{ toJson(job.services)}}" # { mysql: { id, ports:[], network } }
      - run: echo "job.container= ${{ toJson(job.container)}}" # {id, network }
      # FYI alternative is just use docker compose to orchestrate it all for you and plug it into a step, and the reason I suggest that is b/c you can run it locally and test it w/o pushing or using smth like act, but YMMV so service containers exist too

      # ... hook this into CD pipeline, i.e. before cd-deploy
