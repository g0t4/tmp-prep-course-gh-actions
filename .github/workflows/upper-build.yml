name: upper build

on:
  push:
    paths:
      - ".github/workflows/upper-build.yml"
      - "upper/**"
  workflow_dispatch: # manual

# FYI go guide: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

defaults:
  run:
    working-directory: upper
    # w/ work-dir set => running commands before checkout fails (i.e. act w/o --reuse)

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest] #, windows-latest, macos-latest]
        # TODO investigate demo for matrix strategy to build for diff go versions (less "practical") OR cpu arch or OSes
        #   IDEA => show executable downloaded (from uploaded linux binary) doesn't work on macos => download it and try to run it... "file could not be run by the operating system." => ok, lets build on a mac instead then too
        # PRN pivot to GOOS/GOARCH to cross compile: https://golang.org/doc/install/source#environment, i.e.:
        #  GOOS=linux GOARCH=amd64 go build -o upper-linux main.go
        #  GOOS=windows GOARCH=amd64 go build -o upper-windows.exe main.go
        #  GOOS=darwin GOARCH=amd64 go build -o upper-darwin main.go
        #  why? one, simple ubuntu runner can handle all of them (even arch)... much less complexity

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          # go-version: '1.21.10'
          # go-version: '1.20' # include quotes
          go-version-file: 'upper/go.mod' # uses version in go.mod
          #
          # show in logs: Warning: Restore cache failed: Dependencies file is not found ... Supported file pattern: go.sum
          cache-dependency-path: upper/go.sum # dont enable this until get to the cache demo topic, leave broken in the log
          # cache: false
          # caching (repo root) by default: hash(go.sum) https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go#caching-dependencies
      - run: go env
      - run: which go
      - run: go version
      - run: go version && pwd
        working-directory: .github/ # go to dir w/o go.mod to see `go version` setup => b/c `go version` is affected by the presence of a go.mod file in the current directory
      # FYI offer script alternative for the build process, extol local reproducibility
      # - run: go clean # PRN
      - run: go mod download # PURPOSE: consolidate downloads to a single step to see the time impact w/ and w/o caching (do not need this otherwise, b/c go build will download dependencies as needed - during build,test,etc) - aside: another benefit => make sure deps are available before starting the build
      # - run: go env # dump env to review config on the runner, i.e. go env GOPATH, FYI setup-go dumps this too
      - run: go build -o "upper-${{ matrix.os }}"
      - run: go version "upper-${{ matrix.os }}"
      - run: go test
      - run: ls -al # after build show outputs too
        if: matrix.os != 'windows-latest'
      - uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: upper/upper-* # relative to
          # retention-days: X (default 90 => or repo setting)
          # compression-level: 0  # disable compression
        # observe debug commands in output (i.e. "Search path", "File" found, and "Root artifact directory" for archive context)
      - name: publish to a release
        # race condition if publishing releases in parallel
        uses: softprops/action-gh-release@v2 # https://github.com/marketplace/actions/gh-release
        with:
          files: upper/upper-*
          # tag_name: ${{ github.ref_name }}
          # prerelease: true # FYI
          body: "Release of upper command for uppercasing text..."
        if: startsWith(github.ref, 'refs/tags/')
        #    requirie tag w/ v* prefix to trigger release
        #
# cdr; act --workflows .github/workflows/upper-build.yml --reuse
#    warn to test w/o --reuse, as needed, i.e. major changes to the workflow
